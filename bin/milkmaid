#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'main'
require 'paint'
require 'milkmaid'

def milkmaid
  @milkmaid ||= Milkmaid.new
end

def handle_exceptions
  begin
    yield
  rescue RTM::NoTokenException
    puts "Authentication token not found. Run `#{__FILE__} auth start`"
  rescue Milkmaid::TaskNotFound
    puts "Task ##{params['tasknum'].value} not found. Run `#{__FILE__} task` " +
      "to load a list of tasks."
  rescue Milkmaid::ListNotFound
    puts "List ##{params['listnum'].value} not found. Run `#{__FILE__} list` " +
      "to load lists."
  rescue Errno::ETIMEDOUT
    puts "Unable to connect to the server. Please try again later."
  end
end

def colorize(ts)
  task = Milkmaid::last_task ts
  text = ts['name']
  text << "(R)" unless ts['rrule'].nil?
  text << " #{Time.parse(Milkmaid::last_task(ts)['due']).getlocal.strftime(
            "%A %b %d, %Y %I:%M %p")}" unless task['due'].empty?
  color = {
    '1'=>[234, 82, 0], 
    '2'=>[0, 96, 191], 
    '3'=>[53, 154, 255], 
    'N'=>:nothing
  }
  mode1 = mode2 = nil
  case Date.today <=> Date.parse(task['due'])
  when 0
    mode1 = :bold
  when 1
    mode1 = :bold
    mode2 = :underline
  end unless task['due'].empty?
  Paint[text, color[task['priority']], mode1, mode2]
end

Main {
  description "Milkmaid command-line client for Remember the Milk\n" +
    "If this is your first time running this, use the auth command to connect to your account."

  def run
    help!
  end

  mode :list do
    description "Display the available lists."

    def run
      handle_exceptions do
        milkmaid.lists.each_with_index { |list, i| puts "#{i+1}: #{list['name']}" }
      end
    end
  end

  mode :task do
    description "Lists inactive tasks. Tasks that repeat are marked with a (R).\n" +
      "If there is a due date, it appears to the right of the task. Tasks are color\n" +
      "coded by priority the same when viewed on the web. Tasks due today are in bold\n" +
      "while tasks that are overdue are underlined.\n" +
      "Use this command to assign a number to tasks so you may perform other actions."
    
    option('listnum','l') {
      argument :optional
      cast :int
      description <<-EOD
      Show tasks that belong to the given list. Use the number as printed by the
      list command.
      EOD
    }

    def run
      handle_exceptions do
        milkmaid.incomplete_tasks(params['listnum'].value).each_with_index do |ts, i|
          header = "#{i+1}: "
          puts header + colorize(ts)
        end
      end
    end
    
    mode :complete do
      description "Marks a task as complete."

      argument(:tasknum) {
        cast :int
        description "The number of the task as printed by the list command."
      }

      def run
        handle_exceptions { milkmaid.complete_task params['tasknum'].value }
      end
    end

    mode :postpone do
      description "Extends the due date of a task."

      argument(:tasknum) {
        cast :int
        description "The number of the task as printed by the list command."
      }

      def run
        handle_exceptions { milkmaid.postpone_task params['tasknum'].value }
      end
    end

    mode :delete do
      description "Gets rid of a task."

      argument(:tasknum) {
        cast :int
        description "The number of the task as printed by the list command."
      }

      option('confirm', 'i') {
        argument :optional
        description <<-EOD
        Request confirmation before attempting to operation.
        EOD
      }

      def run
        handle_exceptions {
          task = milkmaid.incomplete_tasks(params['listnum'].value)[params['tasknum'].value-1]
          if params['confirm'].value
            puts "Delete \"#{colorize(task)}\"? (yes/no) "
            puts "Please enter yes or no." until ["yes", "no\n"].include?(ans = STDIN.gets[0..2])
          end
          milkmaid.delete_task params['tasknum'].value if (ans == "yes" or not params['confirm'].value)
        }
      end
    end

    mode :add do
      argument(:taskname) 

      def run
        handle_exceptions { milkmaid.add_task params['taskname'].value }
      end
    end
  end

        
  mode :auth do
    description "Auth commands are used to connect Milkmaid to your account."

    mode :start do
      description "Use this command to generate an authentication link.\n" +
        "Follow the link before issuing the auth finish command."

      def run
        puts '1. Visit the URL to authorize the application to access your account.'
        puts "2. Run `#{__FILE__} auth finish`"
        puts
        puts milkmaid.auth_start
      end
    end

    mode :finish do
      description "Use this command to complete authentication to your account."

      def run
        begin
          milkmaid.auth_finish
          puts 'Authentication token saved.'
        rescue RTM::VerificationException
          puts "Invalid frob. Did you visit the link from `#{__FILE__} auth start`?"
        rescue RuntimeError
          puts "Frob does not exist. Did you run `#{__FILE__} auth start`?"
        end
      end
    end
  end

  mode :clean do
    description "Cleans cached data out of the config file."

    def run
      milkmaid.clean
    end
  end
}
